"""
Module pour le traitement automatique d'une configuration de s√©quence sans interface graphique.
Ce module permet de pr√©parer les configurations des plugins pour l'ex√©cution.
"""

import os
import traceback
import re
from ruamel.yaml import YAML
import json
from pathlib import Path
from typing import List, Dict, Any, Tuple, Optional, Set, Union

from ..utils.logging import get_logger
from ..choice_screen.plugin_utils import get_plugin_folder_name, get_plugin_settings_path
from .config_manager import ConfigManager

logger = get_logger('auto_config')
yaml = YAML()
yaml.preserve_quotes = True

# Compilation de l'expression r√©guli√®re une seule fois pour une meilleure performance
VAR_PATTERN = re.compile(r'\{([^}]+)\}')

class AutoConfig:
    """
    Gestion automatique de la configuration des plugins sans interface graphique.
    
    Cette classe permet de traiter une s√©quence et de g√©n√©rer une configuration
    compatible avec ExecutionScreen sans passer par l'interface de configuration.
    """
    
    def __init__(self):
        """Initialisation du gestionnaire de configuration automatique."""
        logger.debug("Initialisation d'AutoConfig")
        self.config_manager = ConfigManager()
        self.settings_cache = {}  # Cache pour les fichiers settings.yml
        
    def process_sequence(self, sequence_path: Union[str, Path], 
                         plugin_instances: List[Tuple[str, int, Optional[Dict[str, Any]]]]) -> Dict[str, Any]:
        """
        Traite une s√©quence et g√©n√®re une configuration pour tous les plugins.
        
        Args:
            sequence_path: Chemin vers le fichier de s√©quence YAML
            plugin_instances: Liste de tuples (plugin_name, instance_id, [config])
            
        Returns:
            dict: Configuration des plugins au format attendu par ExecutionScreen
        """
        try:
            sequence_path = Path(sequence_path) if isinstance(sequence_path, str) else sequence_path
            logger.debug(f"Traitement de la s√©quence {sequence_path} avec {len(plugin_instances)} plugins")
            
            # Charger la s√©quence
            sequence_data = self._load_sequence(sequence_path)
            if not sequence_data:
                logger.error(f"Impossible de charger la s√©quence: {sequence_path}")
                return {}
            
            # Configuration finale √† retourner
            config = {}
            
            # Indexer les plugins par type pour faciliter le traitement
            sequence_plugins_by_type = self._index_sequence_plugins(sequence_data.get('plugins', []))
            plugin_type_instances = self._count_plugin_type_instances(plugin_instances)
            
            # Traiter chaque plugin avec sa configuration
            for i, plugin_data in enumerate(plugin_instances):
                # Extraire les informations du plugin
                if len(plugin_data) >= 3:
                    plugin_name, instance_id, initial_config = plugin_data
                else:
                    plugin_name, instance_id = plugin_data[:2]
                    initial_config = None
                
                # Ignorer les s√©quences
                if plugin_name.startswith('__sequence__'):
                    continue
                
                # G√©n√©rer l'ID unique du plugin
                plugin_id = f"{plugin_name}_{instance_id}"
                logger.debug(f"Traitement du plugin {plugin_id} (instance {plugin_type_instances[plugin_name].index(instance_id) + 1} de {len(plugin_type_instances[plugin_name])})")
                
                # Construire la configuration compl√®te du plugin
                plugin_config = self._build_plugin_config(
                    plugin_name, 
                    instance_id, 
                    sequence_plugins_by_type.get(plugin_name, []),
                    plugin_type_instances[plugin_name].index(instance_id),
                    initial_config
                )
                
                # Ajouter au r√©sultat
                config[plugin_id] = plugin_config
                logger.debug(f"Configuration g√©n√©r√©e pour {plugin_id}")
            
            logger.debug(f"Configuration compl√®te g√©n√©r√©e avec {len(config)} plugins")
            return config
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la s√©quence: {e}")
            logger.error(traceback.format_exc())
            return {}

    def _load_sequence(self, sequence_path: Path) -> Optional[Dict[str, Any]]:
        """
        Charge une s√©quence depuis un fichier YAML.
        
        Args:
            sequence_path: Chemin du fichier de s√©quence
            
        Returns:
            Optional[Dict[str, Any]]: Donn√©es de la s√©quence ou None en cas d'erreur
        """
        try:
            if not sequence_path.exists():
                logger.error(f"Fichier de s√©quence inexistant: {sequence_path}")
                return None
                
            with open(sequence_path, 'r', encoding='utf-8') as f:
                sequence_data = yaml.load(f)
                logger.debug(f"S√©quence charg√©e: {sequence_path}")
                return sequence_data
        except Exception as e:
            logger.error(f"Erreur lors du chargement de la s√©quence {sequence_path}: {e}")
            return None

    def _index_sequence_plugins(self, plugins: List[Any]) -> Dict[str, List[Dict[str, Any]]]:
        """
        Indexe les plugins d'une s√©quence par leur type.
        
        Args:
            plugins: Liste des plugins de la s√©quence
            
        Returns:
            Dict[str, List[Dict[str, Any]]]: Plugins index√©s par type
        """
        indexed = {}
        
        for plugin in plugins:
            # Traiter les deux formats possibles (dict ou str)
            if isinstance(plugin, dict) and 'name' in plugin:
                plugin_name = plugin['name']
                if plugin_name not in indexed:
                    indexed[plugin_name] = []
                indexed[plugin_name].append(plugin)
            elif isinstance(plugin, str):
                if plugin not in indexed:
                    indexed[plugin] = []
                indexed[plugin].append({'name': plugin})
        
        return indexed
        
    def _count_plugin_type_instances(self, plugin_instances: List[Tuple[str, int, Optional[Dict[str, Any]]]]) -> Dict[str, List[int]]:
        """
        Compte les instances de chaque type de plugin.
        
        Args:
            plugin_instances: Liste des instances de plugins
            
        Returns:
            Dict[str, List[int]]: Pour chaque type de plugin, liste des IDs d'instance
        """
        type_instances = {}
        
        for plugin_data in plugin_instances:
            plugin_name = plugin_data[0]
            instance_id = plugin_data[1]
            
            # Ignorer les s√©quences
            if plugin_name.startswith('__sequence__'):
                continue
                
            if plugin_name not in type_instances:
                type_instances[plugin_name] = []
                
            type_instances[plugin_name].append(instance_id)
            
        return type_instances

    def _load_plugin_settings(self, plugin_name: str) -> Optional[Dict[str, Any]]:
        """
        Charge les param√®tres d'un plugin avec mise en cache.
        
        Args:
            plugin_name: Nom du plugin
            
        Returns:
            Optional[Dict[str, Any]]: Param√®tres du plugin ou None en cas d'erreur
        """
        # V√©rifier d'abord le cache
        if plugin_name in self.settings_cache:
            return self.settings_cache[plugin_name]
        
        try:
            # Determiner le chemin du fichier settings.yml
            settings_path = get_plugin_settings_path(plugin_name)
            
            # Charger les param√®tres
            with open(settings_path, 'r', encoding='utf-8') as f:
                settings = yaml.load(f)
                
            # Mettre en cache
            self.settings_cache[plugin_name] = settings
            logger.debug(f"Param√®tres charg√©s pour {plugin_name}")
            return settings
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement des param√®tres de {plugin_name}: {e}")
            return None

    def _build_plugin_config(self, plugin_name: str, instance_id: int, 
                           sequence_configs: List[Dict[str, Any]], 
                           sequence_position: int,
                           initial_config: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Construit la configuration compl√®te d'un plugin.
        
        Args:
            plugin_name: Nom du plugin
            instance_id: ID d'instance
            sequence_configs: Liste des configurations dans la s√©quence pour ce plugin
            sequence_position: Position du plugin dans sa s√©quence
            initial_config: Configuration initiale du plugin
            
        Returns:
            Dict[str, Any]: Configuration compl√®te du plugin
        """
        # Charger les param√®tres du plugin
        plugin_settings = self._load_plugin_settings(plugin_name)
        if not plugin_settings:
            logger.warning(f"Param√®tres non trouv√©s pour {plugin_name}")
            plugin_settings = {'name': plugin_name, 'icon': 'üì¶'}
        
        # Structure de base de la configuration
        config = {
            'plugin_name': plugin_name,
            'instance_id': instance_id,
            'name': plugin_settings.get('name', plugin_name),
            'show_name': plugin_settings.get('plugin_name', plugin_name),
            'icon': plugin_settings.get('icon', 'üì¶'),
            'config': {},
            'remote_execution': False
        }
        
        # 1. Ajouter les valeurs par d√©faut depuis les param√®tres
        self._add_default_values(config, plugin_settings)
        
        # 2. Ajouter la configuration de la s√©quence si disponible
        if sequence_configs and sequence_position < len(sequence_configs):
            seq_config = sequence_configs[sequence_position]
            self._add_sequence_config(config, seq_config)
        
        # 3. Ajouter la configuration initiale (priorit√© maximale)
        if initial_config:
            self._add_initial_config(config, initial_config)
        
        # 4. Charger les contenus de fichiers dynamiques si n√©cessaire
        config = self._load_dynamic_file_contents(plugin_name, config)
        
        # 5. Finaliser la configuration pour l'ex√©cution
        self._finalize_config(config, plugin_settings)
        
        return config

    def _add_default_values(self, config: Dict[str, Any], plugin_settings: Dict[str, Any]) -> None:
        """
        Ajoute les valeurs par d√©faut des champs √† la configuration.
        
        Args:
            config: Configuration √† compl√©ter
            plugin_settings: Param√®tres du plugin
        """
        # Parcourir tous les champs
        config_fields = plugin_settings.get('config_fields', {})
        if isinstance(config_fields, list):
            # Convertir en dictionnaire si c'est une liste
            fields_dict = {}
            for field in config_fields:
                if isinstance(field, dict) and 'id' in field:
                    fields_dict[field['id']] = field
            config_fields = fields_dict
            
        # Ajouter chaque valeur par d√©faut
        for field_id, field_config in config_fields.items():
            if isinstance(field_config, dict) and 'default' in field_config:
                variable_name = field_config.get('variable', field_id)
                config['config'][variable_name] = field_config['default']
                logger.debug(f"Valeur par d√©faut pour {variable_name}: {field_config['default']}")

    def _add_sequence_config(self, config: Dict[str, Any], sequence_config: Dict[str, Any]) -> None:
        """
        Ajoute la configuration de la s√©quence √† la configuration.
        
        Args:
            config: Configuration √† compl√©ter
            sequence_config: Configuration du plugin dans la s√©quence
        """
        # V√©rifier d'abord config puis variables (r√©trocompatibilit√©)
        if 'config' in sequence_config:
            config['config'].update(sequence_config['config'])
            logger.debug(f"Configuration de s√©quence ajout√©e (format 'config')")
        elif 'variables' in sequence_config:
            config['config'].update(sequence_config['variables'])
            logger.debug(f"Configuration de s√©quence ajout√©e (format 'variables')")
            
        # Copier les attributs sp√©ciaux
        special_keys = ['remote_execution']
        for key in special_keys:
            if key in sequence_config:
                config[key] = sequence_config[key]

    def _add_initial_config(self, config: Dict[str, Any], initial_config: Dict[str, Any]) -> None:
        """
        Ajoute la configuration initiale √† la configuration.
        
        Args:
            config: Configuration √† compl√©ter
            initial_config: Configuration initiale du plugin
        """
        # Si la configuration initiale a une structure 'config'
        if 'config' in initial_config:
            config['config'].update(initial_config['config'])
            logger.debug(f"Configuration initiale ajout√©e (format 'config')")
        else:
            # Sinon copier toutes les cl√©s non sp√©ciales
            special_keys = {'plugin_name', 'instance_id', 'name', 'show_name', 'icon', 'remote_execution'}
            for key, value in initial_config.items():
                if key not in special_keys:
                    config['config'][key] = value
            logger.debug(f"Configuration initiale ajout√©e (format plat)")
            
        # Copier les cl√©s sp√©ciales au niveau principal
        for key in ['name', 'show_name', 'icon', 'remote_execution']:
            if key in initial_config:
                config[key] = initial_config[key]

    def _load_dynamic_file_contents(self, plugin_name: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Charge le contenu des fichiers dynamiques r√©f√©renc√©s dans la configuration.
        
        Args:
            plugin_name: Nom du plugin
            config: Configuration du plugin
            
        Returns:
            Dict[str, Any]: Configuration mise √† jour
        """
        try:
            # R√©cup√©rer les param√®tres du plugin
            plugin_settings = self._load_plugin_settings(plugin_name)
            if not plugin_settings:
                return config
                
            # V√©rifier si le plugin utilise files_content
            files_content = plugin_settings.get('files_content', {})
            if not files_content:
                return config
                
            logger.debug(f"Le plugin {plugin_name} utilise files_content: {files_content}")
            
            # Traiter chaque fichier r√©f√©renc√©
            folder_name = get_plugin_folder_name(plugin_name)
            plugin_dir = Path('plugins') / folder_name
            
            for content_key, path_template in files_content.items():
                try:
                    # Remplacer les variables dans le chemin
                    file_path = self._resolve_template_path(path_template, config['config'])
                    
                    # Si toutes les variables sont remplac√©es, charger le fichier
                    if '{' not in file_path:
                        # Construire le chemin complet
                        full_path = plugin_dir / file_path
                        
                        if full_path.exists():
                            # Charger le contenu du fichier
                            with open(full_path, 'r', encoding='utf-8') as f:
                                file_content = yaml.load(f)
                            
                            # Ajouter le contenu
                            config['config'][content_key] = file_content
                            logger.debug(f"Contenu de {full_path} charg√© pour {content_key}")
                        else:
                            logger.warning(f"Fichier {full_path} introuvable")
                except Exception as e:
                    logger.error(f"Erreur lors du chargement de {content_key}: {e}")
                    logger.error(traceback.format_exc())
        except Exception as e:
            logger.error(f"Erreur lors du chargement des fichiers dynamiques: {e}")
            
        return config

    def _resolve_template_path(self, template: str, variables: Dict[str, Any]) -> str:
        """
        R√©sout un chemin de template en rempla√ßant les variables.
        
        Args:
            template: Chemin de template avec variables {var}
            variables: Dictionnaire des variables √† remplacer
            
        Returns:
            str: Chemin r√©solu
        """
        path = template
        
        # Trouver toutes les variables dans le template
        var_matches = VAR_PATTERN.findall(template)
        
        for var in var_matches:
            if var in variables:
                value = str(variables[var])
                
                # √âviter les doubles extensions
                if '.yml' in template and value.endswith('.yml'):
                    value = value[:-4]  # Retirer .yml
                    logger.debug(f"Extension .yml retir√©e de {value+'.yml'} pour √©viter la double extension")
                
                # Remplacer la variable
                path = path.replace(f"{{{var}}}", value)
        
        return path

    def _process_ssh_config(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite les configurations SSH sp√©cifiques.
        
        Args:
            config: Configuration du plugin
            
        Returns:
            Dict[str, Any]: Configuration mise √† jour
        """
        try:
            # V√©rifier si c'est un plugin SSH
            if 'ssh_ips' in config['config']:
                # G√©rer les IPs multiples ou wildcards
                from ..ssh_manager.ip_utils import get_target_ips
                target_ips = get_target_ips(
                    config['config'].get('ssh_ips', ''), 
                    config['config'].get('ssh_exception_ips', [])
                )
                if target_ips:
                    config['config']['ssh_ips'] = ','.join(target_ips)
                    logger.debug(f"IPs SSH trait√©es: {config['config']['ssh_ips']}")
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la configuration SSH: {e}")
            
        return config

    def _finalize_config(self, config: Dict[str, Any], plugin_settings: Dict[str, Any]) -> None:
        """
        Finalise la configuration pour l'ex√©cution.
        
        Args:
            config: Configuration √† finaliser
            plugin_settings: Param√®tres du plugin
        """
        # V√©rifier si le plugin supporte l'ex√©cution distante
        supports_remote = plugin_settings.get('remote_execution', False)
        remote_enabled = config.get('remote_execution', False)
        
        # Appliquer l'√©tat d'ex√©cution distante final
        config['remote_execution'] = supports_remote and remote_enabled
        
        # Si l'ex√©cution distante est activ√©e, traiter la configuration SSH
        if config['remote_execution']:
            config = self._process_ssh_config(config)
            logger.debug(f"Configuration SSH trait√©e pour ex√©cution distante")

# Fonction utilitaire pour √™tre appel√©e directement depuis main.py
def process_sequence_file(sequence_path: Union[str, Path], 
                        plugin_instances: List[Tuple[str, int, Optional[Dict[str, Any]]]]) -> Dict[str, Any]:
    """
    Traite un fichier de s√©quence et retourne la configuration des plugins.
    
    Args:
        sequence_path: Chemin vers le fichier de s√©quence
        plugin_instances: Liste des instances de plugins
        
    Returns:
        Dict[str, Any]: Configuration des plugins au format ExecutionScreen
    """
    auto_config = AutoConfig()
    return auto_config.process_sequence(sequence_path, plugin_instances)